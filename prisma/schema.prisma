// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                  Int       @id @default(autoincrement())
  username            String    @unique @db.VarChar(50)
  email               String    @unique @db.VarChar(100)
  password            String    @map("password_hash") @db.VarChar(255)
  fullName            String?   @map("full_name") @db.VarChar(100)
  bio                 String?   @db.Text
  profilePicture      String?   @map("profile_picture_url") @db.VarChar(255)
  createdAt           DateTime  @default(now()) @map("created_at")
  updatedAt           DateTime  @updatedAt @map("updated_at")

  // Relasi
  posts               Post[]
  likes               Like[]
  comments            Comment[]
  sentNotifications   Notification[] @relation("NotificationSender")
  receivedNotifications Notification[] @relation("NotificationReceiver")
  userRoles           UserRole[]
  following           Follow[] @relation("FollowFollowing")
  followers           Follow[] @relation("FollowFollower")

  @@map("users")
}

model Role {
  id        Int    @id @default(autoincrement())
  name      String @unique @db.VarChar(50)
  userRoles UserRole[]

  @@map("roles")
}

model UserRole {
  userId Int @map("user_id")
  roleId Int @map("role_id")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  role Role @relation(fields: [roleId], references: [id], onDelete: Cascade)

  @@id([userId, roleId])
  @@map("user_roles")
}

model Post {
  id      Int    @id @default(autoincrement())
  userId  Int    @map("user_id")
  content String @db.Text
  imageUrl String? @map("image_url") @db.VarChar(255)
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  user      User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  likes     Like[]
  comments  Comment[]
  notifications Notification[]

  @@map("posts")
}

model Follow {
  followerId  Int @map("follower_id")
  followingId Int @map("following_id")
  createdAt   DateTime @default(now()) @map("created_at")

  follower  User @relation("FollowFollowing", fields: [followerId], references: [id], onDelete: Cascade)
  following User @relation("FollowFollower", fields: [followingId], references: [id], onDelete: Cascade)

  @@id([followerId, followingId])
  @@map("follows")
}

model Like {
  userId    Int @map("user_id")
  postId    Int @map("post_id")
  createdAt DateTime @default(now()) @map("created_at")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  post Post @relation(fields: [postId], references: [id], onDelete: Cascade)

  @@id([userId, postId])
  @@map("likes")
}

model Comment {
  id               Int    @id @default(autoincrement())
  postId           Int    @map("post_id")
  userId           Int    @map("user_id")
  parentCommentId  Int?   @map("parent_comment_id")
  content          String @db.Text
  createdAt        DateTime @default(now()) @map("created_at")

  post          Post         @relation(fields: [postId], references: [id], onDelete: Cascade)
  user          User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  parentComment Comment?     @relation("CommentReplies", fields: [parentCommentId], references: [id], onDelete: Cascade)
  replies       Comment[]    @relation("CommentReplies")
  notifications Notification[]

  @@map("comments")
}

model Notification {
  id                  Int      @id @default(autoincrement())
  userId              Int      @map("user_id")
  senderId            Int?     @map("sender_id")
  type                String   @db.VarChar(50)
  relatedPostId       Int?     @map("related_post_id")
  relatedCommentId    Int?     @map("related_comment_id")
  message             String   @db.VarChar(255)
  isRead              Boolean  @default(false) @map("is_read")
  createdAt           DateTime @default(now()) @map("created_at")

  user             User    @relation("NotificationReceiver", fields: [userId], references: [id], onDelete: Cascade)
  sender           User?   @relation("NotificationSender", fields: [senderId], references: [id], onDelete: SetNull)
  relatedPost      Post?   @relation(fields: [relatedPostId], references: [id], onDelete: Cascade)
  relatedComment   Comment? @relation(fields: [relatedCommentId], references: [id], onDelete: SetNull)

  @@map("notifications")
}